An alternative to using includes for caching smaller page fragments is to use caching on taglib tags. When a cacheable tag is called, the parameters it is called with form the cache key. If there is no entry in the cache, the tag is executed and the output that it generated is cached (as well as being written to the page). If there is an entry in the cache, the tag is not executed and the cached output is written to the page. 

{code}
class BlogArticlesTagLib {
    
    static namespace = "blogarticles"
    
    def blogArticlesService

    @Cacheable("blogArticlesTagCache")
    def allArticles = { attrs ->
        out << "<ul>"
        blogArticlesService.getArticles(attrs.id).each {
            out << "<li>${it.title}</li>"
        }
        out << "</ul>"
    }
}
{code}

When we call the tag like soâ€¦

{code}
<blogarticles:allArticles id="${blogId}" />
{code}

The cache key is formed by the 'id' tag. This tag can be reused across different views without changing the caching semantics. That is, the controller/action that the cacheable tag is called from *does not* affect the cache key.

h3. Tags with a body

When caching a tag with a body, if there is a cache hit the body will not be executed. Therefore it doesn't make sense to cache a tag that is invoked with a different body unless you are ensuring the right cacheability through the tag parameters (i.e. cache keys).